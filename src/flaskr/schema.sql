DROP TABLE IF EXISTS reply;
DROP TABLE IF EXISTS collects;
DROP TABLE IF EXISTS likes;
DROP TABLE IF EXISTS post_file;
DROP TABLE IF EXISTS post;
--DROP TABLE IF EXISTS user;

CREATE TABLE user (
  id INT AUTO_INCREMENT PRIMARY KEY,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  username VARCHAR(40) UNIQUE NOT NULL,
  nickname VARCHAR(40) NOT NULL,
  password VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  is_block TINYINT(1) NOT NULL
);

CREATE TABLE post (
  id INT AUTO_INCREMENT PRIMARY KEY,
  author_id INT NOT NULL,
  num_view INT NOT NULL DEFAULT 0,
  num_reply INT NOT NULL DEFAULT 0,
  num_like INT NOT NULL DEFAULT 0,
  num_collect INT NOT NULL DEFAULT 0,
  hot DOUBLE NOT NULL DEFAULT 0,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title TEXT NOT NULL,
  body TEXT NOT NULL,
  is_top TINYINT(1) NOT NULL,
  is_fine TINYINT(1) NOT NULL,
  FOREIGN KEY (author_id) REFERENCES user (id)
);

CREATE TABLE post_file (
  id INT AUTO_INCREMENT PRIMARY KEY,
  post_id INT NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  filename TEXT NOT NULL,
  filehash TEXT NOT NULL,
  FOREIGN KEY (post_id) REFERENCES post (id)
);

CREATE TABLE reply (
  id INT AUTO_INCREMENT PRIMARY KEY,
  author_id INT NOT NULL,
  post_id INT NOT NULL,
  created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  body TEXT NOT NULL,
  FOREIGN KEY (author_id) REFERENCES user (id),
  FOREIGN KEY (post_id) REFERENCES post (id)
);

CREATE TABLE collects (
  id INT AUTO_INCREMENT PRIMARY KEY,
  author_id INT NOT NULL,
  post_id INT NOT NULL,
  FOREIGN KEY (author_id) REFERENCES user (id),
  FOREIGN KEY (post_id) REFERENCES post (id)
);

CREATE TABLE likes (
  id INT AUTO_INCREMENT PRIMARY KEY,
  author_id INT NOT NULL,
  post_id INT NOT NULL,
  FOREIGN KEY (author_id) REFERENCES user (id),
  FOREIGN KEY (post_id) REFERENCES post (id)
);
